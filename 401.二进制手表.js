/*
 * @lc app=leetcode.cn id=401 lang=javascript
 *
 * [401] 二进制手表
 */

// @lc code=start
/**
 * @param {number} num
 * @return {string[]}
 */
// 题解
/**
 * 使用 10bit 同时保存小时和分钟，免去单独计算的麻烦，代码更加简洁。
 * bit	9	8	7	6	5	4	3	2	1	0
   time	8h	4h	2h	1h	32m	16m	8m	4m	2m	1m
 * 遍历过程
以 num = 2 为例：

bits	time
0000000011	0:03
0000000101	0:05
0000001001	0:09
0000010001	0:17
0000100001	0:33
0001000001	1:01
0010000001	2:01
0100000001	4:01
1000000001	8:01
0000000110	0:06
0000001010	0:10
0000010010	0:18
0000100010	0:34
0001000010	1:02
0010000010	2:02
0100000010	4:02
1000000010	8:02
0000001100	0:12
0000010100	0:20
0000100100	0:36
0001000100	1:04
0010000100	2:04
0100000100	4:04
1000000100	8:04
0000011000	0:24
0000101000	0:40
0001001000	1:08
0010001000	2:08
0100001000	4:08
1000001000	8:08
0000110000	0:48
0001010000	1:16
0010010000	2:16
0100010000	4:16
1000010000	8:16
0001100000	1:32
0010100000	2:32
0100100000	4:32
1000100000	8:32
0011000000	3:00
0101000000	5:00
1001000000	9:00
0110000000	6:00
1010000000	10:00
1100000000	12:00

 */
var readBinaryWatch = function (num) {
  const timeList = [];
  function dfs(time, n, index) {
      const hour = time >> 6, minute = time & 0b111111;
      if (hour > 11 || minute > 59) return;
      if (n === 0) {
          timeList.push(`${hour}:${minute < 10 ? "0" + minute : minute}`);
          return;
      }
      const end = 10 - n;
      while (index <= end) {
          dfs(time | (1 << index), n - 1, ++index);
      }
  }
  dfs(0, num, 0);
  return timeList;
};
// @lc code=end

